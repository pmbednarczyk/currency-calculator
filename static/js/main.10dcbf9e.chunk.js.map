{"version":3,"sources":["components/ui/Button/styles.module.scss","containers/Converter/styles.module.scss","components/layout/PageLayout/styles.module.scss","redux/modules/currencies.js","redux/modules/index.js","redux/store.js","components/layout/PageLayout/index.js","components/ui/Button/index.js","containers/Home/index.js","containers/Converter/index.js","routes/index.js","containers/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","btn","raise","primary","fullWidth","gradientAnimation","converterContainer","screenContainer","pageContainer","LOAD_CURRENCIES","LOAD_CURRENCIES_SUCCESS","LOAD_CURRENCIES_FAIL","initialState","data","isProcessing","isProcessed","error","currencies","state","arguments","length","undefined","action","type","Object","objectSpread","loading","payload","rootReducer","combineReducers","client","axios","create","baseURL","responseType","params","app_id","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","PageLayout","content","this","props","react_default","a","createElement","className","styles","Component","Button","_ref","_classNames","children","disabled","onClick","raiseOnInteraction","btnClassnames","classNames","defineProperty","defaultProps","Home","document","body","classList","add","remove","_this","Fragment","ui_Button","history","push","layout_PageLayout","Converter","loadCurrencies","routes","path","component","exact","connect","types","request","url","App","Helmet_default","defaultTitle","title","titleTemplate","Switch","map","route","index","Route","assign","key","PureComponent","withRouter","Boolean","location","hostname","match","store","preloadedState","createStore","applyMiddleware","axiosMiddleware","createClientStore","ReactDOM","render","es","HashRouter","react_router_scroll_4_es","containers_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10dcbf9e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"styles_btn__2RqcC\",\"raise\":\"styles_raise__3m8gy\",\"primary\":\"styles_primary__2qAw0\",\"fullWidth\":\"styles_fullWidth__2zJvd\",\"gradientAnimation\":\"styles_gradientAnimation__sTVNa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"converterContainer\":\"styles_converterContainer__1qTe4\",\"screenContainer\":\"styles_screenContainer__541Lo\",\"gradientAnimation\":\"styles_gradientAnimation__cEBX6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageContainer\":\"styles_pageContainer__3EdcK\",\"gradientAnimation\":\"styles_gradientAnimation__1M3Oi\"};","const LOAD_CURRENCIES = ' currencies/LOAD_CURRENCIES';\r\nconst LOAD_CURRENCIES_SUCCESS = 'currencies/LOAD_CURRENCIES_SUCCESS';\r\nconst LOAD_CURRENCIES_FAIL = 'currencies/LOAD_CURRENCIES_FAIL';\r\n\r\nconst initialState = {\r\n  data: [],\r\n  isProcessing: false,\r\n  isProcessed: false,\r\n  error: null,\r\n};\r\n\r\nconst currencies = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOAD_CURRENCIES:\r\n      return { ...state, loading: true };\r\n    case LOAD_CURRENCIES_SUCCESS:\r\n      return { ...state, loading: false, data: action.payload.data };\r\n    case LOAD_CURRENCIES_FAIL:\r\n      return { ...state, loading: false, error: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function loadCurrencies() {\r\n  return {\r\n    types: [LOAD_CURRENCIES, LOAD_CURRENCIES_SUCCESS, LOAD_CURRENCIES_FAIL],\r\n    payload: {\r\n      request:{\r\n        url:'/currencies.json',\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default currencies;\r\n","import { combineReducers } from 'redux';\r\nimport currencies from './currencies';\r\n\r\nconst rootReducer = combineReducers({\r\n  currencies,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { applyMiddleware, compose, createStore } from 'redux';\r\nimport axios from \"axios\";\r\nimport axiosMiddleware from 'redux-axios-middleware';\r\nimport rootReducer from './modules';\r\n\r\nconst client = axios.create({\r\n  baseURL: \"https://openexchangerates.org/api/\",\r\n  responseType: 'json',\r\n  params: {\r\n    app_id: \"dbc26becf70543f1ab4d0404fa4f77f1\"\r\n  },\r\n});\r\n\r\nconst composeEnhancers =\r\n  (  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ) ?\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n    }) : compose;\r\n\r\nexport const createClientStore = (preloadedState = {}) => {\r\n  return createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    composeEnhancers(applyMiddleware(axiosMiddleware(client))),\r\n  );\r\n};\r\n","import React, { Component } from 'react';\r\nimport styles from './styles.module.scss';\r\n\r\nclass PageLayout extends Component {\r\n  render() {\r\n    const { content } = this.props;\r\n\r\n    return (\r\n      <div className={styles.pageContainer}>\r\n        {content}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PageLayout;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport styles from './styles.module.scss';\r\n\r\nconst Button = (\r\n  {\r\n    children,\r\n    disabled,\r\n    fullWidth,\r\n    primary,\r\n    onClick,\r\n    raiseOnInteraction,\r\n  }\r\n) => {\r\n  const btnClassnames = classNames({\r\n    [styles.btn]: true,\r\n    [styles.primary]: primary,\r\n    [styles.disabled]: disabled,\r\n    [styles.fullWidth]: fullWidth,\r\n    [styles.raise]: raiseOnInteraction,\r\n  });\r\n\r\n  return (\r\n    <button\r\n      className={btnClassnames}\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nButton.propTypes = {\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.node,\r\n    PropTypes.arrayOf(PropTypes.node),\r\n  ]).isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool,\r\n  fullWidth: PropTypes.bool,\r\n  primary: PropTypes.bool,\r\n  raiseOnInteraction: PropTypes.bool,\r\n};\r\n\r\nButton.defaultProps = {\r\n  disabled: false,\r\n  fullWidth: false,\r\n  primary: false,\r\n  raiseOnInteraction: false,\r\n};\r\n\r\nexport default Button;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PageLayout from '../../components/layout/PageLayout';\r\nimport Button from '../../components/ui/Button';\r\n\r\nconst CONVERTER_URL = '/converter';\r\n\r\nclass Home extends Component {\r\n  componentDidMount() {\r\n    document.body.classList.add('animatedBg');\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.body.classList.remove('animatedBg');\r\n  }\r\n\r\n  render() {\r\n    const content = (\r\n      <React.Fragment>\r\n        <h1>Ladies and gentlemans...</h1>\r\n        <p>\r\n          I would like to present you the currencies converter!\r\n        </p>\r\n        <Button\r\n          raiseOnInteraction\r\n          primary\r\n          onClick={() => this.props.history.push(CONVERTER_URL)}\r\n        >\r\n          SEE THE DEVICE\r\n        </Button>\r\n      </React.Fragment>\r\n    );\r\n\r\n    return (\r\n      <PageLayout content={content} />\r\n    );\r\n  }\r\n}\r\n\r\nHome.propTypes = {\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PageLayout from '../../components/layout/PageLayout';\r\nimport { loadCurrencies } from '../../redux/modules/currencies';\r\nimport styles from './styles.module.scss';\r\n\r\nclass Converter extends Component {\r\n  componentDidMount() {\r\n    this.props.loadCurrencies();\r\n  }\r\n  render () {\r\n    const content = (\r\n      <div className={styles.converterContainer}>\r\n        <div className={styles.screenContainer}>\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n    return (\r\n      <PageLayout content={content} />\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(({ currencies }) => ({ currencies }), {\r\n  loadCurrencies,\r\n})(Converter);\r\n","import Home from '../containers/Home';\r\nimport Converter from '../containers/Converter';\r\n\r\nexport default [{\r\n  path: '/',\r\n  component: Home,\r\n  exact: true,\r\n}, {\r\n  path: '/converter',\r\n  component: Converter,\r\n  exact: true,\r\n}]\r\n","import React, { PureComponent } from 'react';\r\nimport { Route, Switch, withRouter } from 'react-router-dom';\r\nimport Helmet from 'react-helmet';\r\nimport routes from '../../routes';\r\n\r\nclass App extends PureComponent {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Helmet\r\n          defaultTitle=\"Currency Calculator\"\r\n          title=\"Homepage\"\r\n          titleTemplate=\"%s | Currency Calculator\"\r\n        />\r\n        <Switch>\r\n          {routes.map(\r\n            (route, index) => <Route key={route.path || index} {...route} />)}\r\n        </Switch>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport { ScrollContext } from 'react-router-scroll-4';\nimport './theme/index.scss';\nimport { createClientStore } from './redux/store';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createClientStore();\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <HashRouter>\n      <ScrollContext>\n        <App />\n      </ScrollContext>\n    </HashRouter>\n  </ReduxProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}